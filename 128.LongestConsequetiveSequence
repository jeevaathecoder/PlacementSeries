//JAVA

class Solution {
    public int longestConsecutive(int[] nums) {

       Set<Integer> set = new HashSet<>();

        for(int i=0;i<nums.length;i++){
            set.add(nums[i]);
        }

                int count =0;
                int maxCount = 0;

        for(int element: set){
            
            if(!set.contains(element -1)){
                 count =1;
                int index = element;

                while(set.contains(index+1)){
                    count++;
                    index++;
                }

                maxCount = Math.max(maxCount , count);
            }
        }
        return maxCount;
    }
}


_-------------------------------------------------------------------------------------


Python

class Solution {
    public int longestConsecutive(int[] nums) {

       Set<Integer> set = new HashSet<>();

        for(int i=0;i<nums.length;i++){
            set.add(nums[i]);
        }

                int count =0;
                int maxCount = 0;

        for(int element: set){
            
            if(!set.contains(element -1)){
                 count =1;
                int index = element;

                while(set.contains(index+1)){
                    count++;
                    index++;
                }

                maxCount = Math.max(maxCount , count);
            }
        }
        return maxCount;
    }
}


-----------------------------------------------------------------------------------------------------------

#include <unordered_set>
#include <algorithm>

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        std::unordered_set<int> num_set(nums.begin(), nums.end());
        int count = 0;
        int max_count = 0;

        for (int element : num_set) {
            if (num_set.find(element - 1) == num_set.end()) {
                count = 1;
                int index = element;

                while (num_set.find(index + 1) != num_set.end()) {
                    count++;
                    index++;
                }

                max_count = std::max(max_count, count);
            }
        }

        return max_count;
    }
};

// Example usage:
#include <iostream>
#include <vector>
using namespace std;

int main() {
    Solution solution;
    vector<int> nums = {100, 4, 200, 1, 3, 2};
    cout << solution.longestConsecutive(nums) << endl;
    return 0;
}